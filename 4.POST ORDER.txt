#include <iostream>
#include <stack>
#include <string>
using namespace std;
// Define a node structure for the expression tree
struct Node {
char data;
Node* left;
Node* right;
Node(char value) : data(value), left(nullptr), right(nullptr) {}
};
// Function to check if the character is an operator
bool isOperator(char c) {
return c == '+' || c == '-' || c == '*' || c == '/';
}
// Function to construct the expression tree from a given prefix expression
Node* constructExpressionTree(const string& prefixExpr) {
stack<Node*> st;
// Traverse the prefix expression in reverse order
for (int i = prefixExpr.length() - 1; i >= 0; --i) {
char c = prefixExpr[i];
Node* newNode = new Node(c);
if (isOperator(c)) {
// Pop two operands from stack and make them children of the operator
newNode->left = st.top();
st.pop();
newNode->right = st.top();
st.pop();
}
// Push the new node onto the stack
st.push(newNode);
}
// The root of the expression tree is the top element of the stack
return st.top();
}
// Function to perform post-order traversal of the expression tree (non-recursive)
void postOrderTraversal(Node* root) {
if (root == nullptr) {
return;
}
stack<Node*> st;
Node* current = root;
do {
while (current != nullptr) {
if (current->right != nullptr) {
st.push(current->right);
}
st.push(current);
current = current->left;
}
current = st.top();
st.pop();
if (!st.empty() && current->right != nullptr && st.top() == current->right) {
st.pop();
st.push(current);
current = current->right;
} else {
cout << current->data << " ";
current = nullptr;
}
} while (!st.empty());
}
// Function to delete the entire expression tree
void deleteTree(Node* root) {
if (root == nullptr) {
return;
}
deleteTree(root->left);
deleteTree(root->right);
delete root;
}
int main() {
// Given prefix expression: +--a*bc/def
string prefixExpr = "+--a*bc/def";
// Construct the expression tree
Node* root = constructExpressionTree(prefixExpr);
// Perform post-order traversal of the expression tree
cout << "Post-order traversal of the expression tree: ";
postOrderTraversal(root);
cout << endl;
// Delete the entire expression tree
deleteTree(root);
return 0;
}
