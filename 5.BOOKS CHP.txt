#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Define a node structure for the book structure tree
struct Node {
    string name;
    vector<Node*> children;
    Node(const string& nodeName) : name(nodeName) {}
};

// Function to print the nodes of the tree using depth-first traversal
void printNodes(Node* root, int depth = 0) {
    if (root == nullptr) {
        return;
    }
    // Print the node's name with indentation based on depth
    for (int i = 0; i < depth; ++i) {
        cout << " ";
    }
    cout << root->name << endl;
    // Recursively print the children nodes
    for (Node* child : root->children) {
        printNodes(child, depth + 1);
    }
}

// Function to construct the book structure tree based on user input
Node* constructBookStructureTree() {
    string nodeName;
    cout << "Enter the name of the book: ";
    getline(cin, nodeName);
    Node* book = new Node(nodeName);

    while (true) {
        string chapterName;
        cout << "Enter the name of a chapter (or 'done' to finish adding chapters): ";
        getline(cin, chapterName);
        if (chapterName == "done") {
            break;
        }
        Node* chapter = new Node(chapterName);
        book->children.push_back(chapter);

        while (true) {
            string sectionName;
            cout << "Enter the name of a section (or 'done' to finish adding sections): ";
            getline(cin, sectionName);
            if (sectionName == "done") {
                break;
            }
            Node* section = new Node(sectionName);
            chapter->children.push_back(section);

            while (true) {
                string subsectionName;
                cout << "Enter the name of a subsection (or 'done' to finish adding subsections): ";
                getline(cin, subsectionName);
                if (subsectionName == "done") {
                    break;
                }
                Node* subsection = new Node(subsectionName);
                section->children.push_back(subsection);
            }
        }
    }
    return book;
}

// Function to delete the entire book structure tree
void deleteTree(Node* root) {
    if (root == nullptr) {
        return;
    }
    for (Node* child : root->children) {
        deleteTree(child);
    }
    delete root;
}

int main() {
    // Constructing the book structure tree based on user input
    Node* book = constructBookStructureTree();

    // Printing the nodes of the book structure tree
    cout << "\nNodes of the book structure tree:" << endl;
    printNodes(book);

    // Delete the entire book structure tree to free up memory
    deleteTree(book);

    return 0;
}
