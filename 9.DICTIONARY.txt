#include <iostream>
#include <algorithm>
using namespace std;
// Structure to represent a node in the AVL tree
struct Node {
string keyword;
string meaning;
Node* left;
Node* right;
int height;
Node(const string& key, const string& val)
: keyword(key), meaning(val), left(nullptr), right(nullptr), height(1) {}
};
// Function to get the height of a node
int getHeight(Node* node) {
if (node == nullptr)
return 0;
return node->height;
}
// Function to get the balance factor of a node
int getBalance(Node* node) {
if (node == nullptr)
return 0;
return getHeight(node->left) - getHeight(node->right);
}
// Function to rotate a subtree rooted with y to the right
Node* rotateRight(Node* y) {
Node* x = y->left;
Node* T2 = x->right;
x->right = y;
y->left = T2;
y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
return x;
}
// Function to rotate a subtree rooted with x to the left
Node* rotateLeft(Node* x) {
Node* y = x->right;
Node* T2 = y->left;
y->left = x;
x->right = T2;
x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
return y;
}
// Function to insert a new node with given keyword and meaning
Node* insert(Node* node, const string& key, const string& val) {
if (node == nullptr)
return new Node(key, val);
if (key < node->keyword)
node->left = insert(node->left, key, val);
else if (key > node->keyword)
node->right = insert(node->right, key, val);
else // Duplicate keyword not allowed
return node;
// Update height of this ancestor node
node->height = 1 + max(getHeight(node->left), getHeight(node->right));
// Get the balance factor and balance the node if needed
int balance = getBalance(node);
// Left Left Case
if (balance > 1 && key < node->left->keyword)
return rotateRight(node);
// Right Right Case
if (balance < -1 && key > node->right->keyword)
return rotateLeft(node);
// Left Right Case
if (balance > 1 && key > node->left->keyword) {
node->left = rotateLeft(node->left);
return rotateRight(node);
}
// Right Left Case
if (balance < -1 && key < node->right->keyword) {
node->right = rotateRight(node->right);
return rotateLeft(node);
}
return node;
}
// Function to find the node with minimum keyword value (leftmost node)
Node* minValueNode(Node* node) {
Node* current = node;
while (current->left != nullptr)
current = current->left;
return current;
}
// Function to delete the node with given keyword
Node* deleteNode(Node* root, const string& key) {
if (root == nullptr)
return root;
if (key < root->keyword)
root->left = deleteNode(root->left, key);
else if (key > root->keyword)
root->right = deleteNode(root->right, key);
else {
if (root->left == nullptr || root->right == nullptr) {
Node* temp = root->left ? root->left : root->right;
// No child case
if (temp == nullptr) {
temp = root;
root = nullptr;
} else // One child case
*root = *temp; // Copy the contents of the non-empty child
delete temp;
} else {
// Node with two children: Get the inorder successor (smallest in the right subtree)
Node* temp = minValueNode(root->right);
// Copy the inorder successor's data to this node
root->keyword = temp->keyword;
root->meaning = temp->meaning;
// Delete the inorder successor
root->right = deleteNode(root->right, temp->keyword);
}
}
if (root == nullptr)
return root;
// Update height of the current node
root->height = 1 + max(getHeight(root->left), getHeight(root->right));
// Get the balance factor and balance the node if needed
int balance = getBalance(root);
// Left Left Case
if (balance > 1 && getBalance(root->left) >= 0)
return rotateRight(root);
// Left Right Case
if (balance > 1 && getBalance(root->left) < 0) {
root->left = rotateLeft(root->left);
return rotateRight(root);
}
// Right Right Case
if (balance < -1 && getBalance(root->right) <= 0)
return rotateLeft(root);
// Right Left Case
if (balance < -1 && getBalance(root->right) > 0) {
root->right = rotateRight(root->right);
return rotateLeft(root);
}
return root;
}
// Function to search for a keyword in the AVL tree and return its meaning
string search(Node* root, const string& key, int& comparisons) {
while (root != nullptr) {
comparisons++;
if (key == root->keyword)
return root->meaning;
else if (key < root->keyword)
root = root->left;
else
root = root->right;
}
return "Keyword not found";
}
// Function to traverse the AVL tree in inorder (ascending order)
void inorderTraversal(Node* root) {
if (root != nullptr) {
inorderTraversal(root->left);
cout << root->keyword << " : " << root->meaning << endl;
inorderTraversal(root->right);
}
}
// Function to traverse the AVL tree in reverse inorder (descending order)
void reverseInorderTraversal(Node* root) {
if (root != nullptr) {
reverseInorderTraversal(root->right);
cout << root->keyword << " : " << root->meaning << endl;
reverseInorderTraversal(root->left);
}
}
// Function to find the maximum number of comparisons for finding any keyword
int maxComparisons(Node* root) {
if (root == nullptr)
return 0;
return 1 + max(maxComparisons(root->left), maxComparisons(root->right));
}
int main() {
Node* root = nullptr;
int comparisons = 0;
root = insert(root, "apple", "a fruit");
root = insert(root, "banana", "a fruit");
root = insert(root, "cat", "an animal");
root = insert(root, "dog", "an animal");
cout << "Inorder traversal (ascending order):" << endl;
inorderTraversal(root);
cout << "\nReverse Inorder traversal (descending order):" << endl;
reverseInorderTraversal(root);
string searchKey = "cat";
string meaning = search(root, searchKey, comparisons);
cout << "\nMeaning of '" << searchKey << "': " << meaning << endl;
cout << "Maximum comparisons for finding any keyword: " << maxComparisons(root) << endl;
root = deleteNode(root, "banana");
cout << "\nAfter deleting 'banana':" << endl;
inorderTraversal(root);
return 0;
}
