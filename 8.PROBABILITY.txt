#include <iostream>
#include <vector>
#include <limits>
using namespace std;
// Function to find the minimum search cost of a binary search tree given access probabilities
double optimalSearchTree(const vector<double>& keys, const vector<double>&
probabilities) {
int n = keys.size();
vector<vector<double>> dp(n + 1, vector<double>(n + 1, 0));
// Fill the diagonal elements of dp matrix with the probabilities
for (int i = 0; i < n; ++i) {
dp[i][i] = probabilities[i];
}
// Fill the dp matrix diagonally
for (int len = 2; len <= n; ++len) {
for (int i = 0; i <= n - len; ++i) {
int j = i + len - 1;
dp[i][j] = numeric_limits<double>::max();
double sumProb = 0;
for (int k = i; k <= j; ++k) {
sumProb += probabilities[k];
}
for (int k = i; k <= j; ++k) {
double cost = ((k > i) ? dp[i][k - 1] : 0) +
((k < j) ? dp[k + 1][j] : 0) +
sumProb;
dp[i][j] = min(dp[i][j], cost);
}
}
}
return dp[0][n - 1];
}
int main() {
vector<double> keys = {10, 12, 20};
vector<double> probabilities = {0.34, 0.33, 0.33};
double minSearchCost = optimalSearchTree(keys, probabilities);
cout << "Minimum search cost of the optimal binary search tree: " << minSearchCost
<< endl;
return 0;
}
