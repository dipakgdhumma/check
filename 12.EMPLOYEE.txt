#include <iostream>
#include <fstream>
#include <string>
using namespace std;

const string dataFilename = "employee_data.dat"; // Data file for storing employee
const string indexFilename = "employee_index.txt"; // Index file for storing indices of data records;

// Structure to represent an employee
struct Employee
{
    int employeeID;
    string name;
    string designation;
    double salary;
};

// Function to add employee information to the data file
void addEmployee(const Employee &employee)
{
    ofstream dataFile(dataFilename, ios::binary | ios::app);
    ofstream indexFile(indexFilename, ios::app);
    if (dataFile && indexFile)
    {
        // Get the current position in the data file
        streampos currentPosition = dataFile.tellp();
        // Write employee data to the data file
        dataFile.write(reinterpret_cast<const char *>(&employee), sizeof(Employee));
        // Write employee ID and file position to the index file
        indexFile << employee.employeeID << " " << currentPosition << endl;
        cout << "Employee information added successfully." << endl;
    }
    else
    {
        cerr << "Error: Unable to open file." << endl;
    }
    dataFile.close();
    indexFile.close();
}


// Function to delete employee information from the data file
void deleteEmployee(int employeeID)
{
    ifstream indexFile(indexFilename);
    ofstream tempIndexFile("temp_index.txt");
    ofstream tempDataFile("temp_data.dat", ios::binary);
    if (!indexFile || !tempIndexFile || !tempDataFile)
    {
        cerr << "Error: Unable to open file." << endl;
        return;
    }
    bool found = false;
    int currentID;
    streampos dataPosition;
    Employee employee;
    while (indexFile >> currentID >> dataPosition)
    {
        if (currentID != employeeID)
        {
            tempIndexFile << currentID << " " << tempDataFile.tellp() << endl;
            indexFile.seekg(dataPosition);
            indexFile.read(reinterpret_cast<char *>(&employee), sizeof(Employee));
            tempDataFile.write(reinterpret_cast<const char *>(&employee), sizeof(Employee));
        }
        else
        {
            found = true;
            cout << "Employee information deleted successfully." << endl;
        }
    }
    indexFile.close();
    tempIndexFile.close();
    tempDataFile.close();

    // Remove the original files and rename the temporary files only if the employee is found
    if (found)
    {
        remove(indexFilename.c_str());
        remove(dataFilename.c_str());
        if (rename("temp_index.txt", indexFilename.c_str()) != 0)
        {
            cerr << "Error: Unable to rename index file." << endl;
        }
        if (rename("temp_data.dat", dataFilename.c_str()) != 0)
        {
            cerr << "Error: Unable to rename data file." << endl;
        }
    }
    else
    {
        cerr << "Error: Employee information not found." << endl;
        // Clean up temporary files if employee information is not found
        remove("temp_index.txt");
        remove("temp_data.dat");
    }
}




// Function to display employee information based on employee ID
void displayEmployee(int employeeID)
{
    ifstream indexFile(indexFilename);
    ifstream dataFile(dataFilename, ios::binary);
    if (!indexFile || !dataFile)
    {
        cerr << "Error: Unable to open file." << endl;
        return;
    }
    int currentID;
    streampos dataPosition;
    Employee employee;
    bool found = false;
    while (indexFile >> currentID >> dataPosition)
    {
        if (currentID == employeeID)
        {
            found = true;
            dataFile.seekg(dataPosition);
            dataFile.read(reinterpret_cast<char *>(&employee), sizeof(Employee));
            cout << "Employee ID: " << employee.employeeID << endl;
            cout << "Name: " << employee.name << endl;
            cout << "Designation: " << employee.designation << endl;
            cout << "Salary: " << employee.salary << endl;
            break;
        }
    }
    indexFile.close();
    dataFile.close();
    if (!found)
    {
        cerr << "Error: Employee information not found." << endl;
    }
}

int main()
{
    int choice, employeeID;
    Employee newEmployee;
    cout << "1. Add Employee\n2. Delete Employee\n3. Display Employee\nEnter your choice: ";
    cin >> choice;
    switch (choice)
    {
    case 1:
        cout << "Enter Employee ID: ";
        cin >> newEmployee.employeeID;
        cin.ignore(); // Ignore newline character
        cout << "Enter Name: ";
        getline(cin, newEmployee.name);
        cout << "Enter Designation: ";
        getline(cin, newEmployee.designation);
        cout << "Enter Salary: ";
        cin >> newEmployee.salary;
        addEmployee(newEmployee);
        break;
    case 2:
        cout << "Enter Employee ID to delete: ";
        cin >> employeeID;
        deleteEmployee(employeeID);
        break;
    case 3:
        cout << "Enter Employee ID to display: ";
        cin >> employeeID;
        displayEmployee(employeeID);
        break;
    default:
        cerr << "Error: Invalid choice." << endl;
        break;
    }
    return 0;
}
